<project name="JDEECo" default="all" basedir=".">
	<description>JDEECo build file</description>
	
	<!-- set global properties for this build -->
	<property name="src" location="src"/>
	<property name="demo" location="demo"/>
	<property name="build" location="bin"/>
	<property name="dist" location="dist"/>
	<property name="river" location="${dist}/apache-river"/>

	<!-- create main directories -->
	<target name="init">
		<tstamp/>
		<mkdir dir="${build}"/>
		<mkdir dir="${dist}"/>
	</target>

	<!-- compile subprojects -->
	<target name="compile-jdeeco" depends="init"
        description="Compiles the JDEECo runtime sources" >
		<mkdir dir="${build}/jdeeco"/>
		<javac srcdir="${src}" destdir="${build}/jdeeco">
			<classpath>
				<pathelement location="lib/jsk-lib.jar"/>
				<pathelement location="lib/jsk-platform.jar"/>
				<pathelement location="lib/bcel-5.2.jar"/>
			</classpath>
		</javac>
	</target>

	<target name="compile-demo" depends="dist-jdeeco"
        description="Compiles the demos sources" >
		<mkdir dir="${build}/demo"/>
		<javac srcdir="${demo}" destdir="${build}/demo">
			<classpath>
				<pathelement location="lib/jsk-lib.jar"/>
				<pathelement location="lib/jsk-platform.jar"/>
				<pathelement location="${dist}/jdeeco.jar"/>
			</classpath>
		</javac>
	</target>

	<!-- package into jar files -->
	<target name="dist-jdeeco" depends="compile-jdeeco"
        description="Generates a jar with JDEECo runtime" >
		<jar jarfile="${dist}/jdeeco.jar" basedir="${build}/jdeeco">
			<manifest>
				<attribute name="Manifest-Version" value="1.0"/>
				<attribute name="Bundle-ManifestVersion" value="2"/>
                <attribute name="Bundle-Version" value="0.0.1.SNAPSHOT"/>
				<attribute name="Bundle-ClassPath" value="."/>
				<attribute name="Export-Package" value="cz.cuni.mff.d3s.deeco.invokable,cz.cuni.mff.d3s.deeco.ensemble,cz.cuni.mff.d3s.deeco.knowledge,cz.cuni.mff.d3s.deeco.knowledge.local,cz.cuni.mff.d3s.deeco.knowledge.jini,cz.cuni.mff.d3s.deeco.runtime,cz.cuni.mff.d3s.deeco.scheduling,cz.cuni.mff.d3s.deeco.annotations,cz.cuni.mff.d3s.deeco.processor"/>
				<attribute name="Bundle-Name" value="JDEECo" />
				<attribute name="Bundle-SymbolicName" value="cz.cuni.mff.d3s.deeco.jdeeco" />
            </manifest>
		</jar>
	</target>

	<target name="dist-demo" depends="compile-demo"
        description="Generates a jar with the demos" >
		<jar jarfile="${dist}/demo.jar" basedir="${build}/demo"/>
	</target>

	<!-- zip source files -->
	<target name="zip" depends="init"
        description="Creates a zip with the source files" >
		<zip destfile="${dist}/sources.zip">
			<zipfileset dir="src"/>
			<zipfileset dir="demo"/>
		</zip>
	</target>
	
	<!-- download and setup jpf - requires mercurial -->
	<target name="get-jpf">
		<mkdir dir="${dist}/jpf"/>
		<exec executable="hg" dir="${dist}/jpf" searchpath="true">
			<arg value="clone"/>
			<arg value="http://babelfish.arc.nasa.gov/hg/jpf/jpf-core"/> 
		</exec>
		<ant dir="${dist}/jpf/jpf-core"/>
	</target>

	<!-- download and setup apache river -->
	<target name="get-ar">
		<get src="http://apache.mirror.dkm.cz/pub/apache/river/river-2.2.0/apache-river-2.2.0-bin.zip" 
			dest="${dist}/apache-river.zip" verbose="on"/>
		<mkdir dir="${river}"/>
		<unzip src="${dist}/apache-river.zip" dest="${dist}"/>
		<move file="${dist}/apache-river-2.2.0" tofile="${river}"/>
		<delete file="${dist}/apache-river.zip"/>
		<copy todir="${river}-config">
			<fileset dir="apache-river-config"/>
		</copy>
	</target>

	<!-- start apache river -->
	<target name="start-ar-httpd">
		<java fork="true" jar="${river}/lib/classserver.jar" dir="${dist}">
			<arg line="-port 8080 -dir"/>
			<arg path="${river}/lib:${river}/lib-dl"/>
		</java>
	</target>

	<target name="start-ar-jrmp-reggie">
		<java fork="true" jar="${river}/lib/start.jar" dir="${dist}">
			<jvmarg value="-Djava.security.policy=${river}-config/start.policy"/>
			<jvmarg value="-Djava.ext.dirs=${river}/lib-ext"/>
			<arg path="${river}-config/start-reggie.config"/>
		</java>
	</target>

	<target name="start-ar-jrmp-mahalo-group">
		<java fork="true" jar="${river}/lib/start.jar" dir="${dist}">
			<jvmarg value="-Djava.security.policy=${river}-config/start.policy"/>
			<arg path="${river}-config/start-mahalo-group.config"/>
		</java>
	</target>

	<target name="start-ar-jrmp-outrigger-group">
		<java fork="true" jar="${river}/lib/start.jar" dir="${dist}">
			<jvmarg value="-Djava.security.policy=${river}-config/start.policy"/>
			<arg path="${river}-config/start-outrigger-group.config"/>
		</java>
	</target>

	<!-- start apache river - main task -->
	<target name="start-ar"
		description="Starts the Apache River">
		<parallel>
			<antcall target="start-ar-httpd"/>
			<antcall target="start-ar-jrmp-reggie"/>
			<antcall target="start-ar-jrmp-outrigger-group"/>
			<antcall target="start-ar-jrmp-mahalo-group"/>
		</parallel>
	</target>

	<!-- start cloud demo with local shared memory -->
	<target name="cloud-local" depends="dist-demo"
		description="Runs the cloud demo">
		<java classname="cz.cuni.mff.d3s.deeco.demo.cloud.LocalLauncherCloudNoJPF" fork="true">
			<classpath>
				<pathelement location="${dist}/demo.jar"/>
				<pathelement location="${dist}/jdeeco.jar"/>
				<pathelement location="lib/jsk-lib.jar"/>
				<pathelement location="lib/jsk-platform.jar"/>
			</classpath>
			<jvmarg value="-Djava.security.policy=${river}-config/start.policy"/>
			<jvmarg value="-Djava.rmi.server.RMIClassLoaderSpi=net.jini.loader.pref.PreferredClassProvider"/>
		</java>
	</target>
	
	<!-- start convoy demo with local shared memory -->
		<target name="convoy-local" depends="dist-demo"
			description="Runs the convoy demo">
			<java classname="cz.cuni.mff.d3s.deeco.demo.convoy.LocalLauncherConvoyNoJPF" fork="true">
				<classpath>
					<pathelement location="${dist}/demo.jar"/>
					<pathelement location="${dist}/jdeeco.jar"/>
					<pathelement location="lib/jsk-lib.jar"/>
					<pathelement location="lib/jsk-platform.jar"/>
				</classpath>
				<jvmarg value="-Djava.security.policy=${river}-config/start.policy"/>
				<jvmarg value="-Djava.rmi.server.RMIClassLoaderSpi=net.jini.loader.pref.PreferredClassProvider"/>
			</java>
		</target>
	
	<!-- start cloud demo with tuple spaces as shared memory -->
	<target name="cloud-ts" depends="dist-demo"
		description="Runs the cloud demo">
		<parallel>
			<antcall target="start-ar"/>
			<java classname="cz.cuni.mff.d3s.deeco.demo.cloud.TSLauncherCloudNoJPF" fork="true">
				<classpath>
					<pathelement location="${dist}/demo.jar"/>
					<pathelement location="${dist}/jdeeco.jar"/>
					<pathelement location="lib/jsk-lib.jar"/>
					<pathelement location="lib/jsk-platform.jar"/>
				</classpath>
				<jvmarg value="-Djava.security.policy=${river}-config/start.policy"/>
				<jvmarg value="-Djava.rmi.server.RMIClassLoaderSpi=net.jini.loader.pref.PreferredClassProvider"/>
			</java>
		</parallel>
	</target>
	
	<!-- start cloud demo with tuple spaces as shared memory -->
	<target name="convoy-ts" depends="dist-demo"
		description="Runs the convoy demo">
		<parallel>
			<antcall target="start-ar"/>
			<java classname="cz.cuni.mff.d3s.deeco.demo.convoy.TSLauncherConvoyNoJPF" fork="true">
				<classpath>
					<pathelement location="${dist}/demo.jar"/>
					<pathelement location="${dist}/jdeeco.jar"/>
					<pathelement location="lib/jsk-lib.jar"/>
					<pathelement location="lib/jsk-platform.jar"/>
				</classpath>
				<jvmarg value="-Djava.security.policy=${river}-config/start.policy"/>
				<jvmarg value="-Djava.rmi.server.RMIClassLoaderSpi=net.jini.loader.pref.PreferredClassProvider"/>
			</java>
		</parallel>
	</target>
	
	<!-- package cloud demo ensembles and components into single jar file -->
	<target name="dist-cloud-demo" depends="compile-demo"
        description="Generates a jar with cloud demo main classes" >
		<jar jarfile="${dist}/cloud-demo.jar" basedir="${build}/demo" includes="**/NodeA.class,**/NodeB.class,**/MigrationEnsemble.class">
			<manifest>
                <attribute name="Bundle-Version" value="0.0.1.SNAPSHOT"/>
				<attribute name="Export-Package" value="cz.cuni.mff.d3s.deeco.demo.cloud"/>
				<attribute name="Bundle-Name" value="Cloud demo package" />
				<attribute name="Bundle-SymbolicName" value="cz.cuni.mff.d3s.deeco.demo.cloud" />
            </manifest>
		</jar>
	</target>
	
	<!-- Run cloud demo under jpf -->
	<target name="jpf-cloud" depends="get-jpf, dist-cloud-demo, dist-demo">
		<java fork="true" classname="cz.cuni.mff.d3s.deeco.processor.ClassProcessor" dir="${dist}">
			<arg value="cloud-demo.jar"/>
			<classpath>
				<pathelement location="${dist}/jdeeco.jar"/>
				<pathelement location="lib/bcel-5.2.jar"/>
			</classpath>
		</java>
		<java fork="true" jar="${dist}/jpf/jpf-core/build/RunJPF.jar" dir="${dist}">
			<arg value="+classpath=demo.jar;jdeeco.jar"/>
			<arg value="cz.cuni.mff.d3s.deeco.demo.cloud.LocalLauncherCloudJPF"/>
		</java>
	</target>
	
	<!-- prepare new setup -->
	<target name="all"
		description="Cleans the projects and creates a distribution of JDEECo, demos and sources from scratch">
		<antcall target="clean"/>
		<antcall target="dist-demo"/>
		<antcall target="zip"/>
		<antcall target="get-ar"/>
	</target>

	<!-- clean build -->
	<target name="clean"
        description="Cleans up the project" >
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}"/>
		<delete dir="${dist}"/>
	</target>
</project>
