<project name="JDEECo" default="all" basedir=".">
	<description>JDEECo build file</description>
	
	<!-- set global properties for this build -->
	<property name="src" location="src"/>
	<property name="demo" location="demo"/>
	<property name="build" location="bin"/>
	<property name="dist" location="dist"/>
	<property name="river" location="${dist}/apache-river"/>

	<target name="init">
		<tstamp/>
		<mkdir dir="${build}"/>
		<mkdir dir="${dist}"/>
	</target>

	<target name="compile-jdeeco" depends="init"
        description="Compiles the JDEECo runtime sources" >
		<mkdir dir="${build}/jdeeco"/>
		<javac srcdir="${src}" destdir="${build}/jdeeco">
			<classpath>
				<pathelement location="lib/jsk-lib.jar"/>
				<pathelement location="lib/jsk-platform.jar"/>
			</classpath>
		</javac>
	</target>

	<target name="compile-demo" depends="dist-jdeeco"
        description="Compiles the demos sources" >
		<mkdir dir="${build}/demo"/>
		<javac srcdir="${demo}" destdir="${build}/demo">
			<classpath>
				<pathelement location="lib/jsk-lib.jar"/>
				<pathelement location="lib/jsk-platform.jar"/>
				<pathelement location="${dist}/jdeeco.jar"/>
			</classpath>
		</javac>
	</target>

	<target name="dist-jdeeco" depends="compile-jdeeco"
        description="Generates a jar with JDEECo runtime" >
		<jar jarfile="${dist}/jdeeco.jar" basedir="${build}/jdeeco"/>
	</target>

	<target name="dist-demo" depends="compile-demo"
        description="Generates a jar with the demos" >
		<jar jarfile="${dist}/demo.jar" basedir="${build}/demo"/>
	</target>

	<target name="zip" depends="init"
        description="Creates a zip with the source files" >
		<zip destfile="${dist}/sources.zip">
			<zipfileset dir="src"/>
			<zipfileset dir="demo"/>
		</zip>
	</target>

	<target name="get-ar">
		<get src="http://apache.mirror.dkm.cz/pub/apache/river/river-2.2.0/apache-river-2.2.0-bin.zip" 
			dest="${dist}/apache-river.zip" verbose="on"/>
		<mkdir dir="${river}"/>
		<unzip src="${dist}/apache-river.zip" dest="${dist}"/>
		<move file="${dist}/apache-river-2.2.0" tofile="${river}"/>
		<delete file="${dist}/apache-river.zip"/>
		<copy todir="${river}-config">
			<fileset dir="apache-river-config"/>
		</copy>
	</target>

	<target name="start-ar-httpd">
		<java fork="true" jar="${river}/lib/classserver.jar" dir="${dist}">
			<arg line="-port 8080 -dir"/>
			<arg path="${river}/lib:${river}/lib-dl"/>
		</java>
	</target>

	<target name="start-ar-jrmp-reggie">
		<java fork="true" jar="${river}/lib/start.jar" dir="${dist}">
			<jvmarg value="-Djava.security.policy=${river}-config/start.policy"/>
			<jvmarg value="-Djava.ext.dirs=${river}/lib-ext"/>
			<arg path="${river}-config/start-reggie.config"/>
		</java>
	</target>

	<target name="start-ar-jrmp-mahalo-group">
		<java fork="true" jar="${river}/lib/start.jar" dir="${dist}">
			<jvmarg value="-Djava.security.policy=${river}-config/start.policy"/>
			<arg path="${river}-config/start-mahalo-group.config"/>
		</java>
	</target>

	<target name="start-ar-jrmp-outrigger-group">
		<java fork="true" jar="${river}/lib/start.jar" dir="${dist}">
			<jvmarg value="-Djava.security.policy=${river}-config/start.policy"/>
			<arg path="${river}-config/start-outrigger-group.config"/>
		</java>
	</target>

	<target name="start-ar"
		description="Starts the Apache River">
		<parallel>
			<antcall target="start-ar-httpd"/>
			<antcall target="start-ar-jrmp-reggie"/>
			<antcall target="start-ar-jrmp-outrigger-group"/>
			<antcall target="start-ar-jrmp-mahalo-group"/>
		</parallel>
	</target>

	<target name="demo-local" depends="dist-demo"
		description="Runs the convoy demo">
		<java classname="cz.cuni.mff.d3s.deeco.demo.convoy.LocalLauncher" fork="true">
			<classpath>
				<pathelement location="${dist}/demo.jar"/>
				<pathelement location="${dist}/jdeeco.jar"/>
				<pathelement location="lib/jsk-lib.jar"/>
				<pathelement location="lib/jsk-platform.jar"/>
			</classpath>
			<jvmarg value="-Djava.security.policy=${river}-config/start.policy"/>
			<jvmarg value="-Djava.rmi.server.RMIClassLoaderSpi=net.jini.loader.pref.PreferredClassProvider"/>
		</java>
	</target>
	
	<target name="demo-ts" depends="dist-demo"
		description="Runs the convoy demo">
		<parallel>
			<antcall target="start-ar"/>
			<java classname="cz.cuni.mff.d3s.deeco.demo.convoy.TupleSpaceLauncher" fork="true">
				<classpath>
					<pathelement location="${dist}/demo.jar"/>
					<pathelement location="${dist}/jdeeco.jar"/>
					<pathelement location="lib/jsk-lib.jar"/>
					<pathelement location="lib/jsk-platform.jar"/>
				</classpath>
				<jvmarg value="-Djava.security.policy=${river}-config/start.policy"/>
				<jvmarg value="-Djava.rmi.server.RMIClassLoaderSpi=net.jini.loader.pref.PreferredClassProvider"/>
			</java>
		</parallel>
	</target>

	<target name="all"
		description="Cleans the projects and creates a distribution of JDEECo, demos and sources from scratch">
		<antcall target="clean"/>
		<antcall target="dist-demo"/>
		<antcall target="zip"/>
		<antcall target="get-ar"/>
	</target>

	<target name="clean"
        description="Cleans up the project" >
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}"/>
		<delete dir="${dist}"/>
	</target>
</project>
